package quiz;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.Toggle;
import javafx.scene.control.ToggleGroup;

import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.ResourceBundle;

import application.Main;
import data_retrieve.DBretrieve;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;

import javafx.scene.control.TextArea;

import javafx.scene.image.ImageView;

import javafx.scene.control.RadioButton;

import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.BorderPane;
import views.WordPageController;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;

import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;

public class quizController implements Initializable {
	String answer, question;
	int curr_result = 0;
	ArrayList<RadioButton> radios = new ArrayList<RadioButton>();

	String selected_test = "";

	@FXML
	private BorderPane main_pane;
	@FXML
	private ImageView logo;
	@FXML
	private TextField search_txt;
	@FXML
	private AnchorPane startQuiz_pane;
	@FXML
	private AnchorPane prepQuiz_pane;
	@FXML
	private Button search_btn;
	@FXML
	private Button nextQ_btn;
	@FXML
	private Button back_btn;
	@FXML
	private TextField mylist_title;
	@FXML
	private TextArea qus_txt;
	@FXML
	private TextArea quiz_method;
	@FXML
	private RadioButton c1;
	@FXML
	private RadioButton c2;
	@FXML
	private RadioButton c3;
	@FXML
	private RadioButton c4;
	@FXML
	private ChoiceBox choice_box;
	@FXML
	private Button start_btn;

	@FXML
	private Label result_label;

	ToggleGroup rad_group = new ToggleGroup();

	ArrayList<String> all_words = new ArrayList<String>();
	ArrayList<String> all_db_words = new ArrayList<String>();

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {

		quiz_method.getStylesheets().add("/quiz/textAreaStyle.css");
		qus_txt.getStylesheets().add("/views/textAreaStyle.css");

		c1.setToggleGroup(rad_group);
		c2.setToggleGroup(rad_group);
		c3.setToggleGroup(rad_group);
		c4.setToggleGroup(rad_group);

		choice_box.getItems().addAll("Random", "Learned today", "Learned last three days", "Learned this week",
				"The fewest results", "Never tested");
		choice_box.getSelectionModel().selectFirst();

		radios.add(c1);
		radios.add(c2);
		radios.add(c3);
		radios.add(c4);
		chooseAnswer();
	}

	// Event Listener on ImageView[#logo].onMouseClicked
	@FXML
	public void goHome(MouseEvent event) throws IOException {
		// TODO Autogenerated
		if (event.getSource() == logo) {

			Parent home_pane = FXMLLoader.load(getClass().getResource(("/application/Home.fxml")));

			Main.primaryStage.setScene(new Scene(home_pane, Main.primaryStage.getWidth() - 14.40002441,
					Main.primaryStage.getHeight() - 37.59997558));

		}
	}

	// Event Listener on TextField[#search_txt].onKeyPressed
	@FXML
	void wordSearch(ActionEvent event) {

		if (event.getSource() == search_btn && search_txt.getText().length() > 1) {
			searchMethod();
		}

	}

	@FXML
	void searchByKeyboard(KeyEvent event) {

		if (event.getSource() == search_txt && event.getCode().equals(KeyCode.ENTER)) {
			searchMethod();
		}

	}

	public void searchMethod() {

		FXMLLoader loader = new FXMLLoader(getClass().getResource("/views/WordPage.fxml"));

		try {
			loader.load();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		WordPageController wordPageController = loader.<WordPageController>getController();

		String word = search_txt.getText().trim();
		wordPageController.setWord(word);
		wordPageController.initialize(null, null);
		Parent p = loader.getRoot();

		Main.primaryStage.setScene(
				new Scene(p, Main.primaryStage.getWidth() - 14.40002441, Main.primaryStage.getHeight() - 37.59997558));

	}

	// Event Listener on Button[#back_btn].onAction
	@FXML
	public void back_home(ActionEvent event) throws IOException {
		if (event.getSource() == back_btn) {
			Parent home_pane = FXMLLoader.load(getClass().getResource(("/application/Home.fxml")));

			Main.primaryStage.setScene(new Scene(home_pane, Main.primaryStage.getWidth() - 14.40002441,
					Main.primaryStage.getHeight() - 37.59997558));
		}
	}

	// Event Listener on Button[#start_btn].onAction
	@FXML
	public void startQuizMethod(ActionEvent event) throws Exception {

		if (event.getSource() == start_btn) {

			selected_test = choice_box.getSelectionModel().getSelectedItem().toString();
			//System.out.println(selected_test);
			startQuiz_pane.toFront();

			all_db_words = DBretrieve.getMyWordList("1").get(1);

			if (selected_test.equals("Random")) {
				all_words = TakeQuiz.getAllWords("random");
			}

			else if (selected_test.equals("Learned today")) {
				all_words = TakeQuiz.getAllWords("today");
			} else if (selected_test.equals("Learned last three days")) {
				all_words = TakeQuiz.getAllWords("three_days");
			} else if (selected_test.equals("Learned this week")) {
				all_words = TakeQuiz.getAllWords("this_week");
			} else if (selected_test.equals("The fewest results")) {
				all_words = TakeQuiz.getAllWords("fewest");
			} else if (selected_test.equals("Never tested")) {
				all_words = TakeQuiz.getAllWords("never_tested");
			}

			makeNewQuestion();

		}

	}

	public void makeNewQuestion() throws Exception {
		//System.out.println(all_words);

		if (all_words.size() != 0) {

			curr_result = 0;
			answer = all_words.get(0);
			question = TakeQuiz.getQuestion(all_words);
			question = question.replaceAll(answer, "____");

			// if the word is start with capital letter
			String answer_cap = answer.substring(0, 1).toUpperCase() + answer.substring(1);
			question = question.replaceAll(answer_cap, "____");

			qus_txt.setText(question);

			ArrayList<String> choices = new ArrayList<String>();
			ArrayList<String> random_choices = new ArrayList<String>();
			choices = TakeQuiz.getChoices(all_db_words, answer);
			random_choices = TakeQuiz.getRandomChoices(choices);
			qus_txt.setText(question);

			c1.setText(random_choices.get(0));
			c2.setText(random_choices.get(1));
			c3.setText(random_choices.get(2));
			c4.setText(random_choices.get(3));
			c1.setVisible(true);
			c2.setVisible(true);
			c3.setVisible(true);
			c4.setVisible(true);

		} else {
			qus_txt.setText("Sorry there is no available words for the feature you chose");
			c1.setVisible(false);
			c2.setVisible(false);
			c3.setVisible(false);
			c4.setVisible(false);
		}

		// take the word the end of the queue

	}

	@FXML
	void goToNewQuestion(ActionEvent event) throws Exception {
		if (event.getSource() == nextQ_btn) {
			//System.out.println(curr_result);
			data_retrieve.DBretrieve.updateWordQuiz(all_words.get(0), curr_result);
			all_words.add(all_words.get(0));
			all_words.remove(0);

			nextQ_btn.setVisible(false);
			result_label.setVisible(false);

			c1.setDisable(false);
			c2.setDisable(false);
			c3.setDisable(false);
			c4.setDisable(false);

			c1.setSelected(false);
			c2.setSelected(false);
			c3.setSelected(false);
			c4.setSelected(false);

			makeNewQuestion();
		}
	}

	public void chooseAnswer() {

		// if a radio is clicked

		rad_group.selectedToggleProperty().addListener(new ChangeListener<Toggle>() {
			public void changed(ObservableValue<? extends Toggle> ov, Toggle old_toggle, Toggle new_toggle) {
				int nb_of_disabled = 0;
				
				 

				// check number of Disabled radios
				for (int i = 0; i < radios.size(); i++) {
					if (radios.get(i).isDisabled()) {
						nb_of_disabled++;
					}

				}

				if (rad_group.getSelectedToggle() != null) {
					RadioButton answer_rd = (RadioButton) new_toggle.getToggleGroup().getSelectedToggle();

					answer_rd.setDisable(true);

					if (answer_rd.getText().equals(answer)) {

						answer_rd.setText(answer_rd.getText() + " ✓ ");
						
						if (nb_of_disabled == 0) {
							curr_result = 2;
						} else if (nb_of_disabled == 1) {
							curr_result = -1;
						} else if (nb_of_disabled == 2) {
							curr_result = -3;
						}
						c1.setDisable(true);
						c2.setDisable(true);
						c3.setDisable(true);
						c4.setDisable(true);

						result_label.setText("✓ Correct");
						result_label.setVisible(true);
						result_label.setStyle("-fx-text-fill: green;");
						nextQ_btn.setVisible(true);
					} else {

						// check if 3 radios are already clicked
						// disable all radios if 3 were clicked
						if (nb_of_disabled == 2) {
							for (int i = 0; i < radios.size(); i++) {
								if (!radios.get(i).isDisabled()) {
									radios.get(i).setText(radios.get(i).getText() + " ✓ ");
									radios.get(i).setDisable(true);
								}
								
								
							}
							curr_result = -5;
							 

							nextQ_btn.setVisible(true);
						}
						result_label.setText("✕ Incorrect");
						result_label.setStyle("-fx-text-fill: red;");
						result_label.setVisible(true);
					}

				}

			}

		});

	}

}
